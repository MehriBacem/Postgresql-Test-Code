

CREATE OR REPLACE FUNCTION
random_text(INTEGER)
RETURNS TEXT
LANGUAGE SQL
AS $$
SELECT array_to_string(array(
SELECT SUBSTRING('23456789abcdefghjkmnpqrstuvwxyz'
FROM floor(random()*31)::int+1 FOR 1)
FROM generate_series(1, $1)), '');
$$;



CREATE or REPLACE FUNCTION test() RETURNS void AS $$
DECLARE 
str text;
iter INT ;
BEGIN 


FOR  iter IN 0..10000 LOOP

SELECT INTO str random_text(6) ;

INSERT INTO documents(description) VALUES(str);
END LOOP;
RETURN;
END;
$$ LANGUAGE plpgsql;

CREATE or REPLACE FUNCTION test1() RETURNS void AS $$
DECLARE 
str text;

compt INT ;
number INT;
iter INT ;
T TEXT[];

BEGIN 


FOR  iter IN 0..10000 LOOP

SELECT INTO str random_text(6) ;

SELECT INTO compt floor(random()*(10000-1+1))+1;


INSERT INTO doc_tags_text VALUES(compt,str);
INSERT INTO tags(tag)  VALUES(str);

INSERT INTO doc_tags_id(doc_id,tag_id) VALUES(compt,(SELECT tag_id FROM tags where tag=str ));
SELECT count(doc_id)  INTO number from doc_tags_array where doc_id=compt ;
SELECT tags  INTO  T  from doc_tags_array where doc_id=compt ;
SELECT INTO T  array_append(T,str) ;

IF number = 1  THEN 
UPDATE  doc_tags_json SET  tags =  jsonb_build_array(T) where doc_id=compt;
UPDATE  doc_tags_array SET tags=T where doc_id=compt;
ELSE

INSERT INTO doc_tags_json(doc_id,tags) VALUES(compt, jsonb_build_array(T));
INSERT INTO doc_tags_array(doc_id,tags) VALUES(compt,T);
END IF;
END LOOP;
RETURN;
END;
$$ LANGUAGE plpgsql;
